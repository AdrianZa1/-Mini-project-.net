@page "/gestion-todo"
@inject HttpClient Http
@using CalculadoraWeb.Pages.Componentes
@using CalculadoraWeb.Models

<h3>Gesti√≥n Completa de Clientes, Medidores y Lecturas</h3>

<Clientes ClientesData="clientes" EliminarCliente="EliminarCliente" AgregarClienteSubmit="AgregarCliente" ClienteError="clienteError" />

<Medidores MedidoresData="medidores" ClientesData="clientes" EliminarMedidor="EliminarMedidor" AgregarMedidorSubmit="AgregarMedidor" MedidorError="medidorError" />

<Lecturas LecturasData="lecturas" EliminarLectura="EliminarLectura" AgregarLecturaSubmit="AgregarLectura" LecturaError="lecturaError" />

@code {
    private List<ClienteDTOView> clientes = new();
    private List<MedidorDTOView> medidores = new();
    private List<LecturaResponseDTO> lecturas = new();

    private string? clienteError;
    private string? medidorError;
    private string? lecturaError;

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
        await CargarMedidores();
        await CargarLecturas();
    }

    // Cargar datos
    private async Task CargarClientes() =>
        clientes = await Http.GetFromJsonAsync<List<ClienteDTOView>>("https://api-net-production.up.railway.app/api/clientes") ?? new();

    private async Task CargarMedidores() =>
        medidores = await Http.GetFromJsonAsync<List<MedidorDTOView>>("https://api-net-production.up.railway.app/api/medidores") ?? new();

    private async Task CargarLecturas() =>
        lecturas = await Http.GetFromJsonAsync<List<LecturaResponseDTO>>("https://api-net-production.up.railway.app/api/lecturas") ?? new();

    // Clientes
    private async Task AgregarCliente(ClienteDTO cliente)
    {
        clienteError = null;
        cliente.Nombre = CapitalizarPalabras(cliente.Nombre);

        var res = await Http.PostAsJsonAsync("https://api-net-production.up.railway.app/api/clientes", cliente);
        if (res.IsSuccessStatusCode)
            await CargarClientes();
        else
            clienteError = "Error al agregar cliente.";
    }

    private async Task EliminarCliente(int id)
    {
        clienteError = null;

        if (medidores.Any(m => m.ClienteId == id))
        {
            clienteError = "No se puede eliminar el cliente porque tiene medidores asociados.";
            return;
        }

        var res = await Http.DeleteAsync($"https://api-net-production.up.railway.app/api/clientes/{id}");
        if (res.IsSuccessStatusCode)
            await CargarClientes();
        else
            clienteError = "Error al eliminar cliente.";
    }

    // Medidores
    private async Task AgregarMedidor(MedidorDTO medidor)
    {
        medidorError = null;

        var res = await Http.PostAsJsonAsync("https://api-net-production.up.railway.app/api/medidores", medidor);
        if (res.IsSuccessStatusCode)
            await CargarMedidores();
        else
            medidorError = "Error al agregar medidor.";
    }

    private async Task EliminarMedidor(int id)
    {
        var res = await Http.DeleteAsync($"https://api-net-production.up.railway.app/api/medidores/{id}");
        if (res.IsSuccessStatusCode)
            await CargarMedidores();
    }

    // Lecturas
    private async Task AgregarLectura(LecturaDTO lectura)
    {
        lecturaError = null;

        var res = await Http.PostAsJsonAsync("https://api-net-production.up.railway.app/api/lecturas", lectura);
        if (res.IsSuccessStatusCode)
            await CargarLecturas();
        else
            lecturaError = "Error al agregar lectura.";
    }

    private async Task EliminarLectura(int id)
    {
        var res = await Http.DeleteAsync($"https://api-net-production.up.railway.app/api/lecturas/{id}");
        if (res.IsSuccessStatusCode)
            await CargarLecturas();
    }

    private string CapitalizarPalabras(string texto) =>
        string.Join(" ", texto.Split(' ', StringSplitOptions.RemoveEmptyEntries)
            .Select(p => char.ToUpper(p[0]) + p.Substring(1).ToLower()));
}
