@page "/lecturas-crud"
@inject HttpClient Http

<h3>Gestión de Lecturas</h3>

<button class="btn btn-primary mb-3" @onclick="ShowAddForm">➕ Nueva Lectura</button>

@if (showForm)
{
    <EditForm Model="nuevaLectura" OnValidSubmit="AgregarLectura">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <label>Fecha:</label>
            <InputDate @bind-Value="nuevaLectura.Fecha" class="form-control" />
        </div>
        <div class="mb-2">
            <label>Valor:</label>
            <InputNumber @bind-Value="nuevaLectura.Valor" class="form-control" />
        </div>
        <div class="mb-2">
            <label>MedidorId:</label>
            <InputNumber @bind-Value="nuevaLectura.MedidorId" class="form-control" />
        </div>
        <button class="btn btn-success" type="submit">Guardar</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="HideForm">Cancelar</button>
    </EditForm>
}

@if (lecturas == null)
{
    <p><em>Cargando...</em></p>
}
else if (!lecturas.Any())
{
    <p>No hay lecturas registradas.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Fecha</th>
                <th>Valor</th>
                <th>Medidor</th>
                <th>Tipo</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var l in lecturas)
            {
                <tr>
                    <td>@l.Id</td>
                    <td>@l.Fecha.ToString("yyyy-MM-dd")</td>
                    <td>@l.Valor</td>
                    <td>@l.NumeroMedidor</td>
                    <td>@l.TipoMedidor</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarLectura(l.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private const string BaseApiUrl = "https://api-net-production.up.railway.app/api";

    private List<LecturaResponseDTO>? lecturas;
    private LecturaDTO nuevaLectura = new();
    private bool showForm = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarLecturas();
    }

    private async Task CargarLecturas()
    {
        lecturas = await Http.GetFromJsonAsync<List<LecturaResponseDTO>>($"{BaseApiUrl}/lecturas");
    }

    private void ShowAddForm()
    {
        nuevaLectura = new LecturaDTO { Fecha = DateTime.Now };
        showForm = true;
    }
    private void HideForm() => showForm = false;

    private async Task AgregarLectura()
    {
        var resp = await Http.PostAsJsonAsync($"{BaseApiUrl}/lecturas", nuevaLectura);
        if (resp.IsSuccessStatusCode)
        {
            await CargarLecturas();
            showForm = false;
        }
    }

    private async Task EliminarLectura(int id)
    {
        var resp = await Http.DeleteAsync($"{BaseApiUrl}/lecturas/{id}");
        if (resp.IsSuccessStatusCode)
        {
            await CargarLecturas();
        }
    }

    public class LecturaResponseDTO
    {
        public int Id { get; set; }
        public DateTime Fecha { get; set; }
        public decimal Valor { get; set; }
        public int MedidorId { get; set; }
        public int NumeroMedidor { get; set; }
        public string TipoMedidor { get; set; }
    }
    public class LecturaDTO
    {
        public DateTime Fecha { get; set; }
        public decimal Valor { get; set; }
        public int MedidorId { get; set; }
    }

    // CRUD para Clientes
    private List<ClienteDTO>? clientes;
    private ClienteDTO nuevoCliente = new();
    private bool showClienteForm = false;

    private async Task CargarClientes()
    {
        clientes = await Http.GetFromJsonAsync<List<ClienteDTO>>($"{BaseApiUrl}/clientes");
    }
    private void ShowAddClienteForm()
    {
        nuevoCliente = new ClienteDTO();
        showClienteForm = true;
    }
    private void HideClienteForm() => showClienteForm = false;
    private async Task AgregarCliente()
    {
        var resp = await Http.PostAsJsonAsync($"{BaseApiUrl}/clientes", nuevoCliente);
        if (resp.IsSuccessStatusCode)
        {
            await CargarClientes();
            showClienteForm = false;
        }
    }
    private async Task EliminarCliente(int id)
    {
        var resp = await Http.DeleteAsync($"{BaseApiUrl}/clientes/{id}");
        if (resp.IsSuccessStatusCode)
        {
            await CargarClientes();
        }
    }
    public class ClienteDTO
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Direccion { get; set; }
        public string Correo { get; set; }
    }

    // CRUD para Medidores
    private List<MedidorDTO>? medidores;
    private MedidorDTO nuevoMedidor = new();
    private bool showMedidorForm = false;

    private async Task CargarMedidores()
    {
        medidores = await Http.GetFromJsonAsync<List<MedidorDTO>>($"{BaseApiUrl}/medidores");
    }
    private void ShowAddMedidorForm()
    {
        nuevoMedidor = new MedidorDTO();
        showMedidorForm = true;
    }
    private void HideMedidorForm() => showMedidorForm = false;
    private async Task AgregarMedidor()
    {
        var resp = await Http.PostAsJsonAsync($"{BaseApiUrl}/medidores", nuevoMedidor);
        if (resp.IsSuccessStatusCode)
        {
            await CargarMedidores();
            showMedidorForm = false;
        }
    }
    private async Task EliminarMedidor(int id)
    {
        var resp = await Http.DeleteAsync($"{BaseApiUrl}/medidores/{id}");
        if (resp.IsSuccessStatusCode)
        {
            await CargarMedidores();
        }
    }
    public class MedidorDTO
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public string Tipo { get; set; }
    }
}
