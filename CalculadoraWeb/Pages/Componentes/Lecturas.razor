@using CalculadoraWeb.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

<h4 class="mt-4">Lecturas</h4>
<button class="btn btn-primary mb-2" @onclick="ShowAddLectura">âž• Nueva Lectura</button>

@if (showFormLectura)
{
    <EditForm Model="nuevaLectura" OnValidSubmit="AgregarLectura">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <label>Fecha:</label>
            <InputDate @bind-Value="nuevaLectura.Fecha" class="form-control" />
        </div>
        <div class="mb-2">
            <label>Valor:</label>
            <InputNumber @bind-Value="nuevaLectura.Valor" class="form-control" />
        </div>
        <div class="mb-2">
            <label>MedidorId:</label>
            <InputNumber @bind-Value="nuevaLectura.MedidorId" class="form-control" />
        </div>
        <button class="btn btn-success" type="submit">Guardar</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="HideFormLectura">Cancelar</button>
    </EditForm>
}

@if (LecturasData == null)
{
    <p><em>Cargando lecturas...</em></p>
}
else if (!LecturasData.Any())
{
    <p>No hay lecturas registradas.</p>
}
else
{
    <table class="table table-bordered">
        <thead><tr><th>Id</th><th>Fecha</th><th>Valor</th><th>Medidor</th><th>Tipo</th><th>Acciones</th></tr></thead>
        <tbody>
            @foreach (var l in LecturasData)
            {
                <tr>
                    <td>@l.Id</td>
                    <td>@l.Fecha.ToString("yyyy-MM-dd")</td>
                    <td>@l.Valor</td>
                    <td>@l.NumeroMedidor</td>
                    <td>@l.TipoMedidor</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarLectura.InvokeAsync(l.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Parameter] public List<LecturaResponseDTO>? LecturasData { get; set; }
    [Parameter] public EventCallback<LecturaDTO> AgregarLecturaSubmit { get; set; }
    [Parameter] public EventCallback<int> EliminarLectura { get; set; }
    [Parameter] public string? LecturaError { get; set; }

    private LecturaDTO nuevaLectura = new();
    private bool showFormLectura = false;

    private void ShowAddLectura() => showFormLectura = true;
    private void HideFormLectura() => showFormLectura = false;

    private async Task AgregarLectura()
    {
        await AgregarLecturaSubmit.InvokeAsync(nuevaLectura);
        showFormLectura = false;
    }
}
