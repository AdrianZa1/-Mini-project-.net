@page "/lecturas"
@inject HttpClient Http
@using System.Text.Json.Serialization

<h3>Lecturas Registradas</h3>

@if (lecturas == null)
{
    <p><em>Cargando...</em></p>
}
else if (!lecturas.Any())
{
    <p>No hay lecturas registradas.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Fecha</th>
                <th>Valor</th>
                <th>Medidor</th>
                <th>Tipo</th>
                <th>Cliente</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var l in lecturas)
            {
                <tr>
                    <td>@l.Id</td>
                    <td>@l.Fecha.ToString("yyyy-MM-dd")</td>
                    <td>@l.Valor $</td>
                    <td>@l.NumeroMedidor</td>
                    <td>@l.TipoMedidor</td>
                    <td>@l.Cliente?.Nombre</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<LecturaResponseDTO>? lecturas;
    private Dictionary<int, Cliente> cacheClientes = new();

    protected override async Task OnInitializedAsync()
    {
        lecturas = await Http.GetFromJsonAsync<List<LecturaResponseDTO>>("https://api-net-production.up.railway.app/api/lecturas");

        foreach (var lectura in lecturas)
        {
            if (!cacheClientes.ContainsKey(lectura.MedidorId))
            {
                try
                {
                    // Primero obtenemos el medidor
                    var medidor = await Http.GetFromJsonAsync<Medidor>($"https://api-net-production.up.railway.app/api/medidores/{lectura.MedidorId}");

                    if (medidor != null)
                    {
                        // Luego obtenemos el cliente usando el clienteId del medidor
                        var cliente = await Http.GetFromJsonAsync<Cliente>($"https://api-net-production.up.railway.app/api/clientes/{medidor.ClienteId}");
                        if (cliente != null)
                        {
                            cacheClientes[lectura.MedidorId] = cliente;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error al cargar cliente para medidor {lectura.MedidorId}: {ex.Message}");
                }
            }

            if (cacheClientes.TryGetValue(lectura.MedidorId, out var clienteEncontrado))
            {
                lectura.Cliente = clienteEncontrado;
            }
        }
    }

    // DTOs
    public class LecturaResponseDTO
    {
        public int Id { get; set; }
        public DateTime Fecha { get; set; }
        public decimal Valor { get; set; }
        public int MedidorId { get; set; }
        public int NumeroMedidor { get; set; }
        public string TipoMedidor { get; set; }

        public Cliente? Cliente { get; set; }
    }

    public class Medidor
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public string Tipo { get; set; }

        [JsonPropertyName("clienteId")]
        public int ClienteId { get; set; }
    }

    public class Cliente
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
    }
}
